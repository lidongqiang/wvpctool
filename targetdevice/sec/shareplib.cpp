#include "stdafx.h"
#include "sha256.h"
#define MAX_LEN 32
uint8 shabuf[MAX_LEN];
uint8 k1[] = 
{
	0x18,0x41,0x41,0x13,0x1d,0xac,0x4f,0xec,
	0xbe,0x42,0xf1,0x04,0x39,0xee,0xeb,0x9d,
	0x8f,0xcc,0x89,0x2b,0xa3,0xcb,0x22,0x96,
	0xd4,0x39,0xcc,0x50,0xa8,0xbe,0x22,0x12,
	0x9e,0xb6,0x6b,0x59,0xbf,0x6b,0xfd,0x70,
	0x0d,0x1d,0x36,0x37,0x5b,0x55,0xe0,0x63,
	0xb2,0x7b,0x5f,0x69,0xd9,0x28,0x70,0xd1,
	0x0f,0x29,0xeb,0x26,0x9b,0xaa,0x45,0x43,
	0x3f,0x8b,0x3c,0x22,0x33,0x47,0x82,0x00,
	0xb3,0x73,0xb8,0xf5,0xbc,0x45,0x96,0xc6,
	0x1b,0x1f,0x9a,0x24,0x4c,0x91,0x12,0x19,
	0x65,0xd4,0xd9,0xc6,0x82,0x2a,0xa5,0x44,
	0xe1,0x22,0x34,0xcc,0x3f,0x37,0x38,0xe9,
	0x87,0xc0,0x5c,0xe7,0x78,0xb0,0x29,0x39,
	0x53,0x0d,0x41,0x10,0x26,0xb0,0xa5,0xcf,
	0xd0,0x2c,0x7d,0xae,0x5a,0x64,0x24,0x22,
	0xb5,0xc6,0xdd,0x5f,0x74,0x9a,0x02,0x9e,
	0xab,0x69,0x0c,0x5d,0x6f,0xed,0x3e,0x5d,
	0x2f,0x84,0x60,0x86,0x5b,0x99,0x50,0x7a,
	0x96,0x09,0xc6,0x01,0xeb,0xe6,0x29,0x0c,
	0x2f,0xaa,0xc7,0x89,0x29,0x38,0x4a,0xbb,
};

bool sharep(const unsigned char * buf ,int length,int nof,unsigned char *resp)
{
    memset(shabuf,0,sizeof(shabuf));
    sha256_ctx ctx;
    sha256_init(&ctx);
    sha256_update(&ctx, k1, sizeof(k1));
    sha256_update(&ctx, (uint8 *)buf, length);
    sha256_final(&ctx, shabuf);
    memcpy(resp,shabuf,nof>MAX_LEN?MAX_LEN:nof);
    return true;
}


#define MAX_RAND_LENG 128
static int   sha_rand_len = -1;
static uint8 sha_rand_val[MAX_RAND_LENG];
void sharand(const unsigned char * randombuf ,int randomlength)
{
	sha_rand_len = randomlength>MAX_RAND_LENG?MAX_RAND_LENG:randomlength;
	memcpy(sha_rand_val,randombuf,sha_rand_len);
}
bool shaget(const unsigned char * buf ,int length,unsigned char *out,int out_len)
{
    memset(shabuf,0,sizeof(shabuf));
    sha256_ctx ctx;
    sha256_init(&ctx);
	if(0 < sha_rand_len) {
    	sha256_update(&ctx, sha_rand_val, sha_rand_len);
	}
    sha256_update(&ctx, (uint8 *)buf, length);
    sha256_final(&ctx, shabuf);
    memcpy(out,shabuf,out_len>MAX_LEN?MAX_LEN:out_len);
    return true;
}


